module game (
	// Avalon Clock Input
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,						// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,		// Avalon-MM Byte Enable
	input  logic [3:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,	// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,	// Avalon-MM Read Data
	
	// Exported Conduit
	output logic [31:0] EXPORT_DATA		// Exported Conduit Signal to LEDs
);


logic [31:0] inputData, newInput, newInput8, newInput9, newInput10,newInput11;
logic[15:0] LoadSelect;
logic[31:0] tR0, tR1, tR2, tR3, tR4, tR5, tR6, tR7, tR8, tR9, tR10, tR11, tR12, tR13, tR14, tR15; 

logic done; 

always_comb
begin
	case(AVL_ADDR)
	4'b0000: inputData = tR0;
	4'b0001: inputData = tR1;
	4'b0010: inputData = tR2;
	4'b0011: inputData = tR3;
	4'b0100: inputData = tR4;
	4'b0101: inputData = tR5;
	4'b0110: inputData = tR6;
	4'b0111: inputData = tR7;
	4'b1000: inputData = tR8;
	4'b1001: inputData = tR9;
	4'b1010: inputData = tR10;
	4'b1011: inputData = tR11;
	4'b1100: inputData = tR12;
	4'b1101: inputData = tR13;
	4'b1110: inputData = tR14;
	4'b1111: inputData = tR15;
	endcase
end




always_comb
begin
if(AVL_ADDR == 4'b0000)
begin
LoadSelect=16'b0000000000000001; 
end
else if(AVL_ADDR == 4'b0001)
begin
LoadSelect=16'b0000000000000010;
end
else if(AVL_ADDR == 4'b0010)
begin
LoadSelect=16'b0000000000000100;
end
else if(AVL_ADDR == 4'b0011)
begin
LoadSelect=16'b0000000000001000;
end
else if(AVL_ADDR == 4'b0100)
begin
LoadSelect=16'b0000000000010000;
end
else if(AVL_ADDR == 4'b0101)
begin
LoadSelect=16'b0000000000100000;
end
else if(AVL_ADDR == 4'b0110)
begin
LoadSelect=16'b0000000001000000;
end
else if(AVL_ADDR == 4'b0111)
begin
LoadSelect=16'b0000000010000000;
end
else if(AVL_ADDR == 4'b1000)
begin
LoadSelect=16'b0000000100000000;
end
else if(AVL_ADDR == 4'b1001)
begin
LoadSelect=16'b0000001000000000;
end
else if(AVL_ADDR == 4'b1010)
begin
LoadSelect=16'b0000010000000000;
end
else if(AVL_ADDR == 4'b1011)
begin
LoadSelect=16'b0000100000000000;
end
else if(AVL_ADDR == 4'b1100)
begin
LoadSelect=16'b0001000000000000;
end
else if(AVL_ADDR == 4'b1101)
begin
LoadSelect=16'b0010000000000000;
end
else if(AVL_ADDR == 4'b1110)
begin
LoadSelect=16'b0100000000000000;
end
else//case(AVL_ADDR = 4'b1111)
begin
LoadSelect=16'b1000000000000000; 
end
end

//logic[31:0] in1, in2, in3, in4, in5, in6, in7; 
/*always_comb
begin
	case(AVL_BYTE_EN)
		4'b0001 : in1 = inputData; 
		4'b0010 : in2 = inputData;
		4'b0100 : in3 = inputData; 
		4'b1000 : in4 = inputData; 
		4'b0011 : in5 = inputData; 
		4'b1100 : in6 = inputData; 
		4'b1111 : in7 = inputData;
	endcase
end
*/
/*
byteenable[3:0] Write Action
1111 Write full 32-bits
1100 Write the two upper bytes
0011 Write the two lower bytes
1000 Write byte 3 only
0100 Write byte 2 only
0010 Write byte 1 only
0001 Write byte 0 only
*/
always_comb
begin
unique case(AVL_BYTE_EN)
4'b0001:
begin
newInput = {inputData[31:8], AVL_WRITEDATA[7:0]}; 
end

4'b0010:
begin
newInput = {inputData[31:16],AVL_WRITEDATA[15:8],inputData[7:0]};
end
 
4'b0100:
begin
newInput = {inputData[31:24],AVL_WRITEDATA[23:16],inputData[15:0]};
end

4'b1000:
begin
newInput = {AVL_WRITEDATA[31:24],inputData[23:0]};
end

4'b0011:
begin
newInput = {inputData[31:16], AVL_WRITEDATA[15:0]}; 
end

4'b1100:
begin
newInput = {AVL_WRITEDATA[31:16], inputData[15:0]}; 
end

4'b1111:
begin
newInput = AVL_WRITEDATA;  
end

default:
newInput = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
endcase
end
logic [31:0] readdata; 

InMUX checkData(.csSelect(AVL_READ && AVL_CS), .IN(inputData), .OUT(readdata));
//&& AVL_CS
reg_32 R0  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[0] && AVL_CS && AVL_WRITE) ,  .D(newInput), .Data_Out(tR0)); 
reg_32 R1  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[1] && AVL_CS && AVL_WRITE),  .D(newInput), .Data_Out(tR1)); 
reg_32 R2  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[2] && AVL_CS && AVL_WRITE),  .D(newInput), .Data_Out(tR2)); 
reg_32 R3  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[3] && AVL_CS && AVL_WRITE),  .D(newInput), .Data_Out(tR3));
reg_32 R4  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[4] && AVL_CS && AVL_WRITE),  .D(newInput), .Data_Out(tR4)); 
reg_32 R5  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[5] && AVL_CS && AVL_WRITE),  .D(newInput), .Data_Out(tR5)); 
reg_32 R6  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[6] && AVL_CS && AVL_WRITE),  .D(newInput), .Data_Out(tR6)); 
reg_32 R7  (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[7] && AVL_CS && AVL_WRITE),  .D(newInput), .Data_Out(tR7)); 

reg_32 R8  (.Clk(CLK), .Reset(RESET), .Load(done),  .D(newInput8), .Data_Out(tR8)); 
reg_32 R9  (.Clk(CLK), .Reset(RESET), .Load(done),  .D(newInput9), .Data_Out(tR9)); 
reg_32 R10 (.Clk(CLK), .Reset(RESET), .Load(done), .D(newInput10), .Data_Out(tR10));  
reg_32 R11 (.Clk(CLK), .Reset(RESET), .Load(done), .D(newInput11), .Data_Out(tR11)); 
   
reg_32 R12 (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[12] && AVL_CS), .D(newInput), .Data_Out(tR12)); 
reg_32 R13 (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[13] && AVL_CS), .D(newInput), .Data_Out(tR13));  

reg_32 R14 (.Clk(CLK), .Reset(RESET), .Load(LoadSelect[14] && AVL_CS && AVL_WRITE), .D(newInput), .Data_Out(tR14));    
reg_32 R15 (.Clk(CLK), .Reset(RESET), .Load(done), .D({31'b0, done}), .Data_Out(tR15)); 
	 
assign AVL_READDATA = readdata;

assign EXPORT_DATA = {newInput8};//tR8[31:16], tR11[15:0]};

AES aes(
	.CLK,
	.RESET, 
	.AES_START(tR14[0]),
	.AES_DONE(done),
	.AES_KEY({tR0[31:0],  tR1[31:0], tR2[31:0], tR3[31:0]}),
	.AES_MSG_ENC({tR4[31:0],  tR5[31:0], tR6[31:0], tR7[31:0]}),
	.AES_MSG_DEC({newInput8,  newInput9, newInput10, newInput11})
);
endmodule

module reg_32 (input  logic Clk, Reset, Load, 
              input  logic [31:0]  D,
              output logic [31:0]  Data_Out);

    always_ff @ (posedge Clk)
    begin
	 	 if (Reset) //notice, this is a sycnrhonous reset, which is recommended on the FPGA
			  Data_Out <= 32'h0;
		 else if (Load)
			  Data_Out <= D;	
    end
endmodule


module InMUX(input csSelect, input logic[31:0] IN, output logic[31:0] OUT); 
always_comb
begin
	OUT = 32'b0; 
	if(csSelect)
	OUT = IN; 
end
endmodule 
