//needs to be modified to be 16 bits
module reg_16 (input  logic Clk, Reset, Load, 
              input  logic [15:0]  D,
              output logic [15:0]  Data_Out);

    always_ff @ (posedge Clk)
    begin
	 	 if (Reset) //notice, this is a sycnrhonous reset, which is recommended on the FPGA
			  Data_Out <= 16'h0;
		 else if (Load)
			  Data_Out <= D;
		// else if (Shift_En)
		// begin
			  //concatenate shifted in data to the previous left-most 3 bits
			  //note this works because we are in always_ff procedure block
			//  Data_Out <= { Shift_In, Data_Out[15:1] }; 
	   // end
    end
	
   // assign Shift_Out = Data_Out[0];

endmodule

module reg_12(input  logic Clk, Reset, Load, 
              input  logic [11:0]  D,
              output logic [11:0]  Data_Out);

    always_ff @ (posedge Clk)
    begin
	 	 if (Reset) //notice, this is a sycnrhonous reset, which is recommended on the FPGA
			  Data_Out <= 12'h0;
		 else if (Load)
			  Data_Out <= D;

		// else if (Shift_En)
		// begin
			  //concatenate shifted in data to the previous left-most 3 bits
			  //note this works because we are in always_ff procedure block
			//  Data_Out <= { Shift_In, Data_Out[15:1] }; 
	   // end
    end
	
   // assign Shift_Out = Data_Out[0];

endmodule